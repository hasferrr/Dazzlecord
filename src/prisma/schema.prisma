generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String    @unique
  email        String    @unique
  passwordHash String
  name         String
  image        String?
  members      Member[]
  channels     Channel[]
  message      Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Server {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  inviteCode String    @unique
  image      String?   @unique
  members    Member[]
  channels   Channel[]
  messages   Message[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Member {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  role      MemberRole @default(GUEST)
  userId    String     @db.ObjectId
  serverId  String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model Channel {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ChannelType @default(TEXT)
  userId    String      @db.ObjectId
  serverId  String      @db.ObjectId
  messages  Message[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  fileName  String?
  deleted   Boolean  @default(false)
  isUpdated Boolean  @default(false)
  userId    String   @db.ObjectId
  channelId String   @db.ObjectId
  serverId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  server  Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

enum MemberRole {
  OWNER
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}
