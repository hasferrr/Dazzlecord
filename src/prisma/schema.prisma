generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String    @unique
  email        String    @unique
  passwordHash String
  name         String
  image        String?
  about        String?
  members      Member[]
  channels     Channel[]
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  friendRequest Friend[] @relation("UserRequest")
  friendAccept  Friend[] @relation("UserAccept")

  directMessages DirectMessage[]
  conversations1 Conversation[]  @relation("user1")
  conversations2 Conversation[]  @relation("user2")
}

model Friend {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userRequestId String       @db.ObjectId
  userAcceptId  String       @db.ObjectId
  status        FriendStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  userRequest User @relation("UserRequest", fields: [userRequestId], references: [id], onDelete: Cascade)
  userAccept  User @relation("UserAccept", fields: [userAcceptId], references: [id], onDelete: Cascade)

  @@unique([userRequestId, userAcceptId])
}

model Server {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  inviteCode String    @unique
  image      String?   @unique
  members    Member[]
  channels   Channel[]
  messages   Message[]
  default    Boolean?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Member {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  role      MemberRole @default(GUEST)
  userId    String     @db.ObjectId
  serverId  String     @db.ObjectId
  Message   Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model Channel {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ChannelType @default(TEXT)
  userId    String      @db.ObjectId
  serverId  String      @db.ObjectId
  messages  Message[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model Conversation {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  directMessages DirectMessage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  userId1 String @db.ObjectId
  userId2 String @db.ObjectId

  user1 User @relation("user1", fields: [userId1], references: [id], onDelete: Cascade)
  user2 User @relation("user2", fields: [userId2], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  fileName  String?
  isUpdated Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String @db.ObjectId
  channelId String @db.ObjectId
  serverId  String @db.ObjectId
  memberId  String @db.ObjectId

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  server  Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  fileName  String?
  isUpdated Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId         String @db.ObjectId
  conversationId String @db.ObjectId

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

enum MemberRole {
  OWNER
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

enum FriendStatus {
  PENDING
  ACCEPTED
}
